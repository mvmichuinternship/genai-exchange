import asyncpg
import os

class DatabaseSchema:
    @staticmethod
    async def create_essential_tables(conn: asyncpg.Connection):
        """Create only the 4 essential tables - no complex workflow tracking"""

        # 1. Sessions - Basic session info
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                session_id VARCHAR(255) PRIMARY KEY,
                user_id VARCHAR(255) NOT NULL,
                project_name VARCHAR(255),
                user_prompt TEXT,
                status VARCHAR(50) DEFAULT 'completed',
                rag_context_loaded INTEGER DEFAULT 0,
                rag_enabled BOOLEAN DEFAULT true,
                agent_used VARCHAR(100) DEFAULT 'sequential_workflow',
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        # 2. Requirements - Original from agent + User edits
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS requirements (
                id VARCHAR(255) PRIMARY KEY,
                session_id VARCHAR(255) REFERENCES sessions(session_id) ON DELETE CASCADE,
                original_content TEXT NOT NULL,
                edited_content TEXT,
                requirement_type VARCHAR(50) DEFAULT 'functional',
                priority VARCHAR(10) DEFAULT 'medium',
                status VARCHAR(20) DEFAULT 'active',
                version INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        # 3. Test Cases - Generated by agent
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS test_cases (
                id VARCHAR(255) PRIMARY KEY,
                session_id VARCHAR(255) REFERENCES sessions(session_id) ON DELETE CASCADE,
                test_name VARCHAR(255) NOT NULL,
                test_description TEXT,
                test_steps JSONB,
                expected_results TEXT,
                test_type VARCHAR(50),
                priority VARCHAR(10) DEFAULT 'medium',
                status VARCHAR(20) DEFAULT 'active',
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        # 4. Many-to-Many - Requirements â†” Test Cases
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS test_case_requirements (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                test_case_id VARCHAR(255) REFERENCES test_cases(id) ON DELETE CASCADE,
                requirement_id VARCHAR(255) REFERENCES requirements(id) ON DELETE CASCADE,
                coverage_type VARCHAR(50) DEFAULT 'direct',
                created_at TIMESTAMP DEFAULT NOW(),
                UNIQUE(test_case_id, requirement_id)
            )
        ''')

        # Performance indexes
        await conn.execute('''
            CREATE INDEX IF NOT EXISTS idx_requirements_session ON requirements(session_id);
            CREATE INDEX IF NOT EXISTS idx_test_cases_session ON test_cases(session_id);
            CREATE INDEX IF NOT EXISTS idx_tcr_test_case ON test_case_requirements(test_case_id);
            CREATE INDEX IF NOT EXISTS idx_tcr_requirement ON test_case_requirements(requirement_id);
        ''')
